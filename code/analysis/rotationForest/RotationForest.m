classdef RotationForest < ExampleClassifier
    %ROTATION FOREST Rotation Forest implementation
    %
    % Implementation based on https://de.mathworks.com/matlabcentral/...
    % fileexchange/38792-rotation-forest-algorithm
    % 
    % Rotation Forest is an extension of Random Forest,
    % where new samples are generated by bootstrapping the original 
    % training set and transforming the features with PCA.
    %
    %% Properties
    %    numTrees ..... The number of trees used in the ensemble
    %    treeEnsemble . The ensemble itself, which is a TreeBagger object
    %    splitParameter .... The number of feature subsets
    
    properties
        %number of trees in the ensemble
        numTrees;
        
        %the tree ensemble
        treeEnsemble;
        
        %how many feature subsets are going to be created
        splitParameter;
        
        %additional specifications possible (eg. predicition of class
        %values as input
    end
    
    methods
        
        function obj = RotationForest(numTrees,splitParameter)
            %specify how many trees should be learned
            obj.numTrees = numTrees;
            obj.splitParameter = splitParameter;
            
        end
        
        function obj = trainOn(obj, trainFeatureCube, trainLabelMap)
            % Extract labeled pixels
            featureList = validListFromSpatial(...
                trainFeatureCube, trainLabelMap, true);
            labelList = validListFromSpatial(...
                trainLabelMap, trainLabelMap, true);
            
            if(obj.splitParameter > size(featureList,2))
                error('splitParameter has to be less than the number of features');
            end
            for l=1:obj.numTrees
                %%% obtain the new samples by rotation forest %%%
                K=obj.splitParameter;
                [R_new,R_coeff]=RotationFal(featureList, labelList, K, 0.75);
                %%%% obtain new samples %%%%
                trainRFnew=featureList*R_new;
                testRFnew=[]*R_new;
                tc = fitctree(trainRFnew,labelList);
                obj.treeEnsemble.append(tc);
                
            end
        end
            
            function predictedLabelMap = classifyOn(...
                obj, evalFeatureCube, maskMap)
            
           % Extract list of unlabeled pixels
            featureList = validListFromSpatial(evalFeatureCube, maskMap);
            
            % Predict labels using the ensemble
            predictedLabelList = obj.treeEnsemble.predict(featureList);
            
            % TreeBagger output is a cell array -> transform to matrix
            predictedLabelList = cellfun(@(x) str2num(x), predictedLabelList);
            
            % Rebuild map representation
            predictedLabelMap = rebuildMap(predictedLabelList, maskMap);
            end
        end
        
end
    



